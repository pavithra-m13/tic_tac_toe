name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Debug - List files before install
        run: ls -la
      
      - name: Show package.json content
        run: cat package.json || echo "No package.json found"
      
      - name: Install dependencies - Verbose mode
        run: npm install --verbose
        
      - name: Debug - Check if node_modules exists
        run: |
          if [ -d "node_modules" ]; then
            echo "node_modules directory exists"
            ls -la node_modules | head -n 10
          else
            echo "node_modules directory does NOT exist"
            echo "Current directory content:"
            ls -la
          fi
      
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      
      # Store the scan results directly in the logs
      - name: Run Trivy vulnerability scan
        run: |
          # Try creating a simple package.json if none exists
          if [ ! -f "package.json" ]; then
            echo "Creating minimal package.json for scanning"
            echo '{"name":"temp-project","version":"1.0.0"}' > package.json
            npm install --no-save lodash
          fi
          
          # Create directory for results
          mkdir -p trivy-results
          
          # Run specific Node.js dependency scan
          echo "Running Trivy NPM scan..."
          trivy fs --scanners vuln --skip-dirs .git,.github,.scannerwork --format table --severity HIGH,CRITICAL . | tee trivy-results/trivyfs.txt
          
          # Show scan results
          echo "Trivy scan completed. Results:"
          cat trivy-results/trivyfs.txt
          
          # Also try direct package.json scan
          echo "Running direct package.json scan..."
          trivy fs --scanners vuln --severity HIGH,CRITICAL package.json | tee trivy-results/package-scan.txt
          
          echo "Package scan completed. Results:"
          cat trivy-results/package-scan.txt
      
      - name: Docker Build and push
        run: |
          docker build -t tic-tac-toe .
          docker tag tic-tac-toe pavithra13/tic-tac-toe:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push pavithra13/tic-tac-toe:latest
        env:
          DOCKER_CLI_ACI: 1
      
      - name: Image scan
        run: trivy image pavithra13/tic-tac-toe:latest > trivyimage.txt

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Docker pull image
        run: docker pull pavithra13/tic-tac-toe:latest
      
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Image scan
        run: trivy image pavithra13/tic-tac-toe:latest > trivyimagedeploy.txt
      
      - name: Deploy to container
        run: docker run -d --name game -p 3000:3000 pavithra13/tic-tac-toe:latest

      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name EKS_CLOUD
      - name: Deploy to kubernetes
        run: kubectl apply -f deployment-service.yml
